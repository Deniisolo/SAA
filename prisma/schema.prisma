// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Tipo de Documento
model TipoDocumento {
  id_Tipo_Documento    Int      @id @default(autoincrement())
  nombre_documento     String   @db.VarChar(45)
  TipoDocumentocol     String   @db.VarChar(45)
  
  // Relaciones
  usuarios             Usuario[]
  
  @@map("tipo_documento")
}

// Rol
model Rol {
  id_Rol               Int      @id @default(autoincrement())
  nombre_rol           String   @db.VarChar(45)
  
  // Relaciones
  usuarios             Usuario[]
  
  @@map("rol")
}

// Estado del Estudiante
model EstadoEstudiante {
  id_estado_estudiante     Int      @id @default(autoincrement())
  descripcion_estado       String   @db.VarChar(45)
  
  // Relaciones
  usuarios                 Usuario[]
  
  @@map("estado_estudiante")
}

// Género
model Genero {
  id_genero            Int      @id @default(autoincrement())
  descripcion          String   @db.VarChar(45)
  
  // Relaciones
  usuarios             Usuario[]
  
  @@map("genero")
}

// Programa de Formación
model ProgramaFormacion {
  idPrograma_formacion     Int      @id @default(autoincrement())
  nombre_programa          String   @db.VarChar(45)
  nivel_formacion          String   @db.VarChar(45)
  
  // Relaciones
  usuarios                 Usuario[]
  fichas                   Ficha[]
  
  @@map("programa_formacion")
}

// Nivel de Formación
model NivelFormacion {
  Id_Nivel_de_formacioncol     String   @id @db.VarChar(45)
  
  // Relaciones
  usuarios                     Usuario[]
  
  @@map("nivel_formacion")
}

// Ficha
model Ficha {
  id_ficha                 Int      @id @default(autoincrement())
  numero_ficha             String   @db.VarChar(45)
  id_programa_formacion    Int
  
  // Relaciones
  usuarios                 Usuario[]
  programa_formacion       ProgramaFormacion @relation(fields: [id_programa_formacion], references: [idPrograma_formacion])
  competencias_ficha       CompetenciaFicha[]
  
  @@map("ficha")
}

// Competencia
model Competencia {
  id_competencia           Int      @id @default(autoincrement())
  nombre_competencia       String   @db.VarChar(100)
  descripcion              String?  @db.Text
  codigo_competencia       String   @db.VarChar(20)
  
  // Relaciones
  competencias_ficha       CompetenciaFicha[]
  clases                   Clase[]
  
  @@map("competencia")
}

// CompetenciaFicha (tabla intermedia para asociar competencias con fichas)
model CompetenciaFicha {
  id_competencia_ficha     Int      @id @default(autoincrement())
  id_competencia           Int
  id_ficha                 Int
  
  // Relaciones
  competencia              Competencia @relation(fields: [id_competencia], references: [id_competencia])
  ficha                    Ficha @relation(fields: [id_ficha], references: [id_ficha])
  
  @@unique([id_competencia, id_ficha])
  @@map("competencia_ficha")
}

// Clase
model Clase {
  id_clase                 Int      @id @default(autoincrement())
  nombre_clase             String   @db.VarChar(100)
  descripcion              String?  @db.Text
  fecha_clase              DateTime
  hora_inicio              String   @db.VarChar(10)
  hora_fin                 String   @db.VarChar(10)
  id_competencia           Int
  id_instructor            Int
  
  // Relaciones
  competencia              Competencia @relation(fields: [id_competencia], references: [id_competencia])
  instructor               Usuario @relation("InstructorClases", fields: [id_instructor], references: [id_usuario])
  asistencias              Asistencia[]
  
  @@map("clase")
}

// Asistencia
model Asistencia {
  id_asistencia            Int      @id @default(autoincrement())
  fecha_asistencia         DateTime @default(now())
  hora_registro            String?  @db.VarChar(10) // Hora de llegada (HH:MM)
  id_usuario               Int
  id_clase                 Int
  estado_asistencia        String   @db.VarChar(20) // "presente", "ausente", "tardanza"
  
  // Relaciones
  usuario                  Usuario @relation(fields: [id_usuario], references: [id_usuario])
  clase                    Clase @relation(fields: [id_clase], references: [id_clase])
  
  @@unique([id_usuario, id_clase])
  @@map("asistencia")
}

// Usuario (tabla principal)
model Usuario {
  id_usuario                                    Int      @id @default(autoincrement())
  nombre                                        String   @db.VarChar(45)
  apellido                                      String   @db.VarChar(45)
  correo_electronico                            String   @db.VarChar(45)
  telefono                                      String   @db.VarChar(45)
  numero_documento                              String   @db.VarChar(45)
  usemame                                       String   @db.VarChar(45) // username (con typo del diagrama)
  Contrasenia                                   String   @db.VarChar(45) // Contraseña
  codigo_qr                                     String?  @db.VarChar(255) // Código QR único para identificación
  Rol_id_Rol                                    Int
  TipoDocumento_id_Tipo_Documento               Int
  EstadoEstudiante_id_estado_estudiante         Int
  Ficha_id_ficha                                Int
  Genero_id_genero                              Int
  Programa_formacion_idPrograma_formacion       Int
  Nivel_de_formacion_Id_Nivel_de_formacioncol   String   @db.VarChar(45)
  
  // Relaciones
  rol                                           Rol      @relation(fields: [Rol_id_Rol], references: [id_Rol])
  tipo_documento                                TipoDocumento @relation(fields: [TipoDocumento_id_Tipo_Documento], references: [id_Tipo_Documento])
  estado_estudiante                             EstadoEstudiante @relation(fields: [EstadoEstudiante_id_estado_estudiante], references: [id_estado_estudiante])
  ficha                                         Ficha    @relation(fields: [Ficha_id_ficha], references: [id_ficha])
  genero                                        Genero   @relation(fields: [Genero_id_genero], references: [id_genero])
  programa_formacion                            ProgramaFormacion @relation(fields: [Programa_formacion_idPrograma_formacion], references: [idPrograma_formacion])
  nivel_formacion                               NivelFormacion @relation(fields: [Nivel_de_formacion_Id_Nivel_de_formacioncol], references: [Id_Nivel_de_formacioncol])
  clases_instructor                             Clase[]  @relation("InstructorClases")
  asistencias                                   Asistencia[]
  
  @@map("usuario")
}
